generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户信息表
model User {
  /// 用户ID
  id          Int      @id @default(autoincrement())
  /// 是否是超级管理员
  isAdmin     Boolean  @default(false)
  /// 账号
  account     String   @unique
  /// 密码
  password    String
  /// 昵称
  nickname    String   @default("")
  /// 头像路径
  avatar      String   @default("")
  /// 邮箱
  email       String   @default("")
  /// 手机号
  phoneNumber String   @default("")
  /// 性别（0女 1男 2未知）
  sex         Int      @default(1)
  /// 状态
  status      Boolean  @default(true)
  /// 创建者
  createBy    String?  @unique
  /// 创建时间
  createdAt   DateTime @default(now())
  /// 更新时间
  updatedAt   DateTime @updatedAt
  /// 备注
  remark      String   @default("")
  creator     User?    @relation("editor", fields: [createBy], references: [account])
  updateBy    User?    @relation("editor")
  dept        Dept[]   @relation("DeptToUser")
  menu        Menu[]   @relation("MenuToUser")
  post        Post[]   @relation("PostToUser")
  role        Role[]   @relation("RoleToUser")
}

/// 岗位信息表
model Post {
  /// 岗位ID
  id        Int      @id @default(autoincrement())
  /// 岗位编码
  code      String   @unique
  /// 岗位名称
  name      String
  /// 显示顺序
  sort      Int      @default(1)
  /// 创建者
  createBy  String
  /// 更新者
  updateBy  String?
  /// 创建时间
  createdAt DateTime @default(now())
  /// 更新时间
  updatedAt DateTime @updatedAt
  /// 备注
  remark    String   @default("")
  user      User[]   @relation("PostToUser")
}

/// 部门信息表
model Dept {
  /// 部门ID
  id        Int      @id @default(autoincrement())
  /// 部门名称
  name      String
  /// 显示顺序
  sort      Int      @default(1)
  /// 负责人
  leader    String   @default("")
  /// 负责人电话
  phone     String   @default("")
  /// 负责人邮箱
  email     String   @default("")
  /// 父部门id
  /// 创建者
  createBy  String
  /// 更新者
  updateBy  String?
  /// 创建时间
  createdAt DateTime @default(now())
  /// 更新时间
  updatedAt DateTime @updatedAt
  parentId  Int?
  parent    Dept?    @relation("DeptToDept", fields: [parentId], references: [id])
  children  Dept[]   @relation("DeptToDept")
  user      User[]   @relation("DeptToUser")
}

/// 角色信息表
model Role {
  /// 角色ID
  id        Int       @id @default(autoincrement())
  /// 角色名称
  name      String    @unique
  /// 角色键值
  value     String    @unique
  /// 显示顺序
  sort      Int       @default(1)
  /// 创建者
  createBy  String
  /// 更新者
  updateBy  String?
  /// 创建时间
  createdAt DateTime  @default(now())
  /// 更新时间
  updatedAt DateTime  @updatedAt
  /// 备注
  remark    String    @default("")
  factory   Factory[] @relation("FactoryToRole")
  menu      Menu[]    @relation("MenuToRole")
  user      User[]    @relation("RoleToUser")
}

/// 权限模型表
model Permission {
  id        Int      @id @default(autoincrement())
  /// 权限名称
  name      String
  /// 权限值
  value     String
  remark    String   @default("")
  /// 绑定菜单id
  menuId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menu      Menu?    @relation(fields: [menuId], references: [id])
}

/// 菜单信息表
model Menu {
  /// 角色ID
  id         Int          @id @default(autoincrement())
  /// 菜单名称
  name       String       @unique
  /// 显示顺序
  sort       Int          @default(1)
  /// 菜单路径
  path       String       @unique
  /// 菜单图标
  icon       String       @default("")
  /// 是否隐藏
  hidden     Boolean      @default(false)
  /// 状态
  status     Boolean      @default(true)
  /// 创建者
  createBy   String
  /// 更新者
  updateBy   String?
  /// 创建时间
  createdAt  DateTime     @default(now())
  /// 更新时间
  updatedAt  DateTime     @updatedAt
  /// 备注
  remark     String       @default("")
  /// 父级菜单ID
  parentId   Int?
  parent     Menu?        @relation("MenuToMenu", fields: [parentId], references: [id])
  children   Menu[]       @relation("MenuToMenu")
  permission Permission[]
  role       Role[]       @relation("MenuToRole")
  user       User[]       @relation("MenuToUser")
}

/// 字典类型表
model DictType {
  /// 字典类型ID
  id           Int            @id @default(autoincrement())
  /// 字典名称
  name         String
  /// 字典键值
  value        String
  /// 创建者
  createBy     String
  /// 更新者
  updateBy     String?
  /// 创建时间
  createdAt    DateTime       @default(now())
  /// 更新时间
  updatedAt    DateTime       @updatedAt
  /// 备注
  remark       String         @default("")
  analysisTask AnalysisTask[]
  dictData     DictData[]
}

/// 字典数据表
model DictData {
  /// 字典数据ID
  id         Int           @id @default(autoincrement())
  /// 字典名称
  name       String
  /// 字典键值
  value      String
  /// 字典排序
  sort       Int           @default(1)
  /// 状态
  status     Boolean       @default(true)
  /// 创建者
  createBy   String
  /// 更新者
  updateBy   String?
  /// 创建时间
  createdAt  DateTime      @default(now())
  /// 更新时间
  updatedAt  DateTime      @updatedAt
  /// 备注
  remark     String        @default("")
  /// 字典类型
  dictTypeId Int
  dictType   DictType      @relation(fields: [dictTypeId], references: [id])
  treeId     Int?
  tree       DictDataTree? @relation(fields: [treeId], references: [id])
}

model DictDataTree {
  id       Int            @id @default(autoincrement())
  name     String
  value    String
  remark   String?
  parentId Int?
  parent   DictDataTree?  @relation("DictDataTreeToDictDataTree", fields: [parentId], references: [id])
  children DictDataTree[] @relation("DictDataTreeToDictDataTree")
  dictData DictData[]
}

/// 单位
model Unit {
  id        Int      @id @default(autoincrement())
  /// 单位名称
  name      String
  /// 单位值
  value     String
  /// 备注
  remark    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 操作日志记录表
model OperationLog {
  /// 操作日志ID
  id           Int      @id @default(autoincrement())
  /// 创建时间
  createdAt    DateTime @default(now())
  /// 模块标题
  title        String
  /// 业务类型（0其它 1新增 2修改 3删除）
  businessType Int      @default(1)
  /// 模块名称
  module       String
  /// 操作员账号
  account      String
  /// ip地址
  ip           String
  /// ip地址对应的地理位置
  address      String
}

/// 登录日志表
model LoginLog {
  id        Int      @id @default(autoincrement())
  /// 创建时间
  createdAt DateTime @default(now())
  /// 用户会话id
  sessionId String   @default("")
  /// 登录账号
  account   String
  /// ip地址
  ip        String
  /// ip地址对应的地理位置
  address   String
  userId    Int
}

/// 工厂表
model Factory {
  id           Int            @id @default(autoincrement())
  /// 工厂名称
  name         String         @unique
  /// 工厂状态
  status       Boolean        @default(true)
  /// 工厂地址
  address      String?        @default("")
  /// 工厂经纬度(可选)
  longitude    String?        @default("")
  latitude     String?        @default("")
  /// 工厂备注
  remark       String         @default("")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  /// 创建者
  createBy     String
  /// 更新者
  updateBy     String?
  parentId     Int?
  analysisTask AnalysisTask[]
  contract     Contract[]
  device       Device[]
  parent       Factory?       @relation("FactoryToFactory", fields: [parentId], references: [id])
  children     Factory[]      @relation("FactoryToFactory")
  valve        Valve[]
  role         Role[]         @relation("FactoryToRole")
}

/// 项目表
model Contract {
  id             Int      @id @default(autoincrement())
  /// 项目名称
  name           String
  /// 签订合同时间
  contractTime   DateTime
  /// 采购阀门总数
  valveCount     Int
  /// 高级阀门数量
  highValveCount Int?     @default(0)
  /// 客户名称
  customer       String   @default("")
  /// 客户联系方式
  customerPhone  String   @default("")
  /// 销售员名称
  saler          String   @default("")
  /// 项目备注
  remark         String   @default("")
  /// 工厂id
  factoryId      Int
  createBy       String
  /// 更新者
  updateBy       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  factory        Factory  @relation(fields: [factoryId], references: [id])
}

/// 装置表
model Device {
  id        Int      @id @default(autoincrement())
  /// 装置名称
  name      String
  /// 装置状态
  status    Boolean  @default(true)
  /// 装置备注
  remark    String   @default("")
  /// 工厂id
  factoryId Int
  createBy  String
  /// 更新者
  updateBy  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  factory   Factory  @relation(fields: [factoryId], references: [id])
  valve     Valve[]
}

/// 阀门表
model Valve {
  id                    Int                @id @default(autoincrement())
  /// 阀门位号
  tag                   String
  /// 装置
  unit                  String?
  /// 介质
  fluidName             String?
  /// 关键应用
  criticalApplication   String?
  /// 阀体序列号
  serialNumber          String?
  /// 投用时间
  since                 DateTime?
  /// 阀体品牌
  valveBrand            String?
  /// 阀体类型
  valveType             String?
  /// 阀体口径
  valveSize             String?
  /// 阀体连接形式
  valveEndConnection    String?
  /// 阀体阀体材质
  valveBodyMaterial     String?
  /// 阀盖形式
  valveBonnet           String?
  /// 阀内件
  valveTrim             String?
  /// 阀体泄漏等级
  valveSeatLeakage      String?
  /// 阀体描述
  valveDescription      String?
  /// 执行机构品牌
  actuatorBrand         String?
  /// 执行机构类型
  actuatorType          String?
  /// 执行机构尺寸
  actuatorSize          String?
  /// 手轮
  handwheel             String?
  /// 执行机构描述
  actuatorDescription   String?
  /// 定位器品牌
  positionerBrand       String?
  /// 定位器类型
  positionerType        String?
  /// 定位器描述
  positionerDescription String?
  /// 附件种类
  accessory             String?
  /// 附件品牌
  accessoryBrand        String?
  /// 附件类型
  accessoryType         String?
  /// 附件数量
  accessoryQuantity     Int?
  /// 附件描述
  accessoryDescription  String?
  /// 仪表品牌
  instrumentBrand       String?
  /// 仪表类型
  instrumentType        String?
  /// 仪表描述
  instrumentDescription String?
  remark                String?
  /// 工厂id
  factoryId             Int
  /// 关联装置id
  deviceId              Int?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  createBy              String             @default("")
  /// 更新者
  updateBy              String?
  /// 分析任务id
  analysisTaskId        Int?
  analysisTask          AnalysisTask?      @relation(fields: [analysisTaskId], references: [id])
  device                Device?            @relation(fields: [deviceId], references: [id])
  factory               Factory            @relation(fields: [factoryId], references: [id])
  valveData             ValveData[]
  ValveDataHistory      ValveDataHistory[]
}

model ValveData {
  id      Int      @id @default(autoincrement())
  /// 状态名
  name    String
  /// 状态值
  value   String
  /// 单位
  unit    String?
  /// 阀门id
  valveId Int
  valve   Valve    @relation(fields: [valveId], references: [id])
  /// 读取时间
  time    DateTime
}

model ValveDataHistory {
  id      Int      @id @default(autoincrement())
  /// 状态名
  name    String
  /// 状态值
  value   String
  /// 单位
  unit    String?
  /// 阀门id
  valveId Int
  valve   Valve    @relation(fields: [valveId], references: [id])
  /// 读取时间
  time    DateTime
}

/// 分析任务表
model AnalysisTask {
  id         Int      @id @default(autoincrement())
  /// 任务名称
  name       String
  /// 任务状态 0未开始 1进行中 2已完成 3失败
  status     Int      @default(0)
  /// 任务备注
  remark     String   @default("")
  /// 字典id
  dictTypeId Int
  /// 工厂id
  factoryId  Int
  createBy   String
  /// 更新者
  updateBy   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dict       DictType @relation(fields: [dictTypeId], references: [id])
  factory    Factory  @relation(fields: [factoryId], references: [id])
  pdf        Pdf[]
  Valve      Valve[]
}

model Pdf {
  id        Int          @id @default(autoincrement())
  /// 文件名
  name      String
  /// 任务id
  taskId    Int
  createBy  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  /// pdf文件路径
  url       String
  task      AnalysisTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
